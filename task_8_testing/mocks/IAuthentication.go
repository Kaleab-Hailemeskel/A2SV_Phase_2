// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	jwt "github.com/dgrijalva/jwt-go"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IAuthentication is an autogenerated mock type for the IAuthentication type
type IAuthentication struct {
	mock.Mock
}

// GenerateSecurityToken provides a mock function with given fields: JWTBody
func (_m *IAuthentication) GenerateSecurityToken(JWTBody map[string]interface{}) (string, time.Duration) {
	ret := _m.Called(JWTBody)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSecurityToken")
	}

	var r0 string
	var r1 time.Duration
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (string, time.Duration)); ok {
		return rf(JWTBody)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(JWTBody)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) time.Duration); ok {
		r1 = rf(JWTBody)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	return r0, r1
}

// GetUserEmailFromSecurityToken provides a mock function with given fields: token
func (_m *IAuthentication) GetUserEmailFromSecurityToken(token *jwt.Token) (string, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEmailFromSecurityToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: tokenString
func (_m *IAuthentication) ParseToken(tokenString string) (*jwt.Token, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenExpired provides a mock function with given fields: token
func (_m *IAuthentication) TokenExpired(token *jwt.Token) (bool, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for TokenExpired")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (bool, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuthentication creates a new instance of IAuthentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthentication {
	mock := &IAuthentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
