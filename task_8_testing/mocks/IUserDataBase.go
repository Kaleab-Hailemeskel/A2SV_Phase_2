// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "task_8_testing/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserDataBase is an autogenerated mock type for the IUserDataBase type
type IUserDataBase struct {
	mock.Mock
}

// CheckUserExistance provides a mock function with given fields: userEmail
func (_m *IUserDataBase) CheckUserExistance(userEmail string) bool {
	ret := _m.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExistance")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userEmail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CloseDataBase provides a mock function with no fields
func (_m *IUserDataBase) CloseDataBase() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseDataBase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserByEmail provides a mock function with given fields: userEmail
func (_m *IUserDataBase) FindUserByEmail(userEmail string) (*models.User, error) {
	ret := _m.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(userEmail)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreUser provides a mock function with given fields: currUser
func (_m *IUserDataBase) StoreUser(currUser *models.User) error {
	ret := _m.Called(currUser)

	if len(ret) == 0 {
		panic("no return value specified for StoreUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(currUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserDataBase creates a new instance of IUserDataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserDataBase {
	mock := &IUserDataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
