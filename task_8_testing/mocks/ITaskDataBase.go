// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "task_8_testing/models"

	mock "github.com/stretchr/testify/mock"
)

// ITaskDataBase is an autogenerated mock type for the ITaskDataBase type
type ITaskDataBase struct {
	mock.Mock
}

// CheckTaskExistance provides a mock function with given fields: taskID
func (_m *ITaskDataBase) CheckTaskExistance(taskID string) bool {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for CheckTaskExistance")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CloseDataBase provides a mock function with no fields
func (_m *ITaskDataBase) CloseDataBase() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseDataBase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOne provides a mock function with given fields: taskID
func (_m *ITaskDataBase) DeleteOne(taskID string) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllTasks provides a mock function with given fields: userEmail
func (_m *ITaskDataBase) FindAllTasks(userEmail string) (*[]models.Task, error) {
	ret := _m.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTasks")
	}

	var r0 *[]models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]models.Task, error)); ok {
		return rf(userEmail)
	}
	if rf, ok := ret.Get(0).(func(string) *[]models.Task); ok {
		r0 = rf(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: taskID
func (_m *ITaskDataBase) FindByID(taskID string) (*models.Task, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Task, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Task); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: t
func (_m *ITaskDataBase) InsertOne(t models.Task) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Task) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: taskID, updatedTask
func (_m *ITaskDataBase) UpdateOne(taskID string, updatedTask models.Task) error {
	ret := _m.Called(taskID, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.Task) error); ok {
		r0 = rf(taskID, updatedTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITaskDataBase creates a new instance of ITaskDataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskDataBase {
	mock := &ITaskDataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
