// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package models_mocks

import (
	"task_8_testing/models"
	"time"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// NewMockIUseCase creates a new instance of MockIUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUseCase {
	mock := &MockIUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUseCase is an autogenerated mock type for the IUseCase type
type MockIUseCase struct {
	mock.Mock
}

type MockIUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUseCase) EXPECT() *MockIUseCase_Expecter {
	return &MockIUseCase_Expecter{mock: &_m.Mock}
}

// CheckOwnership provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) CheckOwnership(taskID primitive.ObjectID, userEmail string) error {
	ret := _mock.Called(taskID, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for CheckOwnership")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID, string) error); ok {
		r0 = returnFunc(taskID, userEmail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUseCase_CheckOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOwnership'
type MockIUseCase_CheckOwnership_Call struct {
	*mock.Call
}

// CheckOwnership is a helper method to define mock.On call
//   - taskID primitive.ObjectID
//   - userEmail string
func (_e *MockIUseCase_Expecter) CheckOwnership(taskID interface{}, userEmail interface{}) *MockIUseCase_CheckOwnership_Call {
	return &MockIUseCase_CheckOwnership_Call{Call: _e.mock.On("CheckOwnership", taskID, userEmail)}
}

func (_c *MockIUseCase_CheckOwnership_Call) Run(run func(taskID primitive.ObjectID, userEmail string)) *MockIUseCase_CheckOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUseCase_CheckOwnership_Call) Return(err error) *MockIUseCase_CheckOwnership_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUseCase_CheckOwnership_Call) RunAndReturn(run func(taskID primitive.ObjectID, userEmail string) error) *MockIUseCase_CheckOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// CloseALLDBConnection provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) CloseALLDBConnection() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseALLDBConnection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUseCase_CloseALLDBConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseALLDBConnection'
type MockIUseCase_CloseALLDBConnection_Call struct {
	*mock.Call
}

// CloseALLDBConnection is a helper method to define mock.On call
func (_e *MockIUseCase_Expecter) CloseALLDBConnection() *MockIUseCase_CloseALLDBConnection_Call {
	return &MockIUseCase_CloseALLDBConnection_Call{Call: _e.mock.On("CloseALLDBConnection")}
}

func (_c *MockIUseCase_CloseALLDBConnection_Call) Run(run func()) *MockIUseCase_CloseALLDBConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIUseCase_CloseALLDBConnection_Call) Return(err error) *MockIUseCase_CloseALLDBConnection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUseCase_CloseALLDBConnection_Call) RunAndReturn(run func() error) *MockIUseCase_CloseALLDBConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreatNewTask provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) CreatNewTask(newTask *models.TaskDTO) (*models.TaskDTO, error) {
	ret := _mock.Called(newTask)

	if len(ret) == 0 {
		panic("no return value specified for CreatNewTask")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.TaskDTO) (*models.TaskDTO, error)); ok {
		return returnFunc(newTask)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.TaskDTO) *models.TaskDTO); ok {
		r0 = returnFunc(newTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.TaskDTO) error); ok {
		r1 = returnFunc(newTask)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_CreatNewTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatNewTask'
type MockIUseCase_CreatNewTask_Call struct {
	*mock.Call
}

// CreatNewTask is a helper method to define mock.On call
//   - newTask *models.TaskDTO
func (_e *MockIUseCase_Expecter) CreatNewTask(newTask interface{}) *MockIUseCase_CreatNewTask_Call {
	return &MockIUseCase_CreatNewTask_Call{Call: _e.mock.On("CreatNewTask", newTask)}
}

func (_c *MockIUseCase_CreatNewTask_Call) Run(run func(newTask *models.TaskDTO)) *MockIUseCase_CreatNewTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.TaskDTO
		if args[0] != nil {
			arg0 = args[0].(*models.TaskDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUseCase_CreatNewTask_Call) Return(taskDTO *models.TaskDTO, err error) *MockIUseCase_CreatNewTask_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockIUseCase_CreatNewTask_Call) RunAndReturn(run func(newTask *models.TaskDTO) (*models.TaskDTO, error)) *MockIUseCase_CreatNewTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) DeleteTask(requestID string, userEmail string) error {
	ret := _mock.Called(requestID, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(requestID, userEmail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUseCase_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockIUseCase_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - requestID string
//   - userEmail string
func (_e *MockIUseCase_Expecter) DeleteTask(requestID interface{}, userEmail interface{}) *MockIUseCase_DeleteTask_Call {
	return &MockIUseCase_DeleteTask_Call{Call: _e.mock.On("DeleteTask", requestID, userEmail)}
}

func (_c *MockIUseCase_DeleteTask_Call) Run(run func(requestID string, userEmail string)) *MockIUseCase_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUseCase_DeleteTask_Call) Return(err error) *MockIUseCase_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUseCase_DeleteTask_Call) RunAndReturn(run func(requestID string, userEmail string) error) *MockIUseCase_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// EditTaskByID provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) EditTaskByID(taskID string, userEmail string, updatedTask *models.TaskDTO) (*models.TaskDTO, error) {
	ret := _mock.Called(taskID, userEmail, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for EditTaskByID")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, *models.TaskDTO) (*models.TaskDTO, error)); ok {
		return returnFunc(taskID, userEmail, updatedTask)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, *models.TaskDTO) *models.TaskDTO); ok {
		r0 = returnFunc(taskID, userEmail, updatedTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, *models.TaskDTO) error); ok {
		r1 = returnFunc(taskID, userEmail, updatedTask)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_EditTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditTaskByID'
type MockIUseCase_EditTaskByID_Call struct {
	*mock.Call
}

// EditTaskByID is a helper method to define mock.On call
//   - taskID string
//   - userEmail string
//   - updatedTask *models.TaskDTO
func (_e *MockIUseCase_Expecter) EditTaskByID(taskID interface{}, userEmail interface{}, updatedTask interface{}) *MockIUseCase_EditTaskByID_Call {
	return &MockIUseCase_EditTaskByID_Call{Call: _e.mock.On("EditTaskByID", taskID, userEmail, updatedTask)}
}

func (_c *MockIUseCase_EditTaskByID_Call) Run(run func(taskID string, userEmail string, updatedTask *models.TaskDTO)) *MockIUseCase_EditTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *models.TaskDTO
		if args[2] != nil {
			arg2 = args[2].(*models.TaskDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUseCase_EditTaskByID_Call) Return(taskDTO *models.TaskDTO, err error) *MockIUseCase_EditTaskByID_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockIUseCase_EditTaskByID_Call) RunAndReturn(run func(taskID string, userEmail string, updatedTask *models.TaskDTO) (*models.TaskDTO, error)) *MockIUseCase_EditTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTask provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) GetAllTask(userEmail string) ([]*models.TaskDTO, error) {
	ret := _mock.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTask")
	}

	var r0 []*models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*models.TaskDTO, error)); ok {
		return returnFunc(userEmail)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*models.TaskDTO); ok {
		r0 = returnFunc(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userEmail)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_GetAllTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTask'
type MockIUseCase_GetAllTask_Call struct {
	*mock.Call
}

// GetAllTask is a helper method to define mock.On call
//   - userEmail string
func (_e *MockIUseCase_Expecter) GetAllTask(userEmail interface{}) *MockIUseCase_GetAllTask_Call {
	return &MockIUseCase_GetAllTask_Call{Call: _e.mock.On("GetAllTask", userEmail)}
}

func (_c *MockIUseCase_GetAllTask_Call) Run(run func(userEmail string)) *MockIUseCase_GetAllTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUseCase_GetAllTask_Call) Return(taskDTOs []*models.TaskDTO, err error) *MockIUseCase_GetAllTask_Call {
	_c.Call.Return(taskDTOs, err)
	return _c
}

func (_c *MockIUseCase_GetAllTask_Call) RunAndReturn(run func(userEmail string) ([]*models.TaskDTO, error)) *MockIUseCase_GetAllTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) GetTaskByID(taskID string, userEmail string) (*models.TaskDTO, error) {
	ret := _mock.Called(taskID, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*models.TaskDTO, error)); ok {
		return returnFunc(taskID, userEmail)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *models.TaskDTO); ok {
		r0 = returnFunc(taskID, userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(taskID, userEmail)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockIUseCase_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - taskID string
//   - userEmail string
func (_e *MockIUseCase_Expecter) GetTaskByID(taskID interface{}, userEmail interface{}) *MockIUseCase_GetTaskByID_Call {
	return &MockIUseCase_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", taskID, userEmail)}
}

func (_c *MockIUseCase_GetTaskByID_Call) Run(run func(taskID string, userEmail string)) *MockIUseCase_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUseCase_GetTaskByID_Call) Return(taskDTO *models.TaskDTO, err error) *MockIUseCase_GetTaskByID_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockIUseCase_GetTaskByID_Call) RunAndReturn(run func(taskID string, userEmail string) (*models.TaskDTO, error)) *MockIUseCase_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithEmail provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) GetUserWithEmail(userEmail string) (*models.UserDTO, error) {
	ret := _mock.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithEmail")
	}

	var r0 *models.UserDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.UserDTO, error)); ok {
		return returnFunc(userEmail)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.UserDTO); ok {
		r0 = returnFunc(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userEmail)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_GetUserWithEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithEmail'
type MockIUseCase_GetUserWithEmail_Call struct {
	*mock.Call
}

// GetUserWithEmail is a helper method to define mock.On call
//   - userEmail string
func (_e *MockIUseCase_Expecter) GetUserWithEmail(userEmail interface{}) *MockIUseCase_GetUserWithEmail_Call {
	return &MockIUseCase_GetUserWithEmail_Call{Call: _e.mock.On("GetUserWithEmail", userEmail)}
}

func (_c *MockIUseCase_GetUserWithEmail_Call) Run(run func(userEmail string)) *MockIUseCase_GetUserWithEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUseCase_GetUserWithEmail_Call) Return(userDTO *models.UserDTO, err error) *MockIUseCase_GetUserWithEmail_Call {
	_c.Call.Return(userDTO, err)
	return _c
}

func (_c *MockIUseCase_GetUserWithEmail_Call) RunAndReturn(run func(userEmail string) (*models.UserDTO, error)) *MockIUseCase_GetUserWithEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithID provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) GetUserWithID(userID string) (*models.UserDTO, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWithID")
	}

	var r0 *models.UserDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.UserDTO, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.UserDTO); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_GetUserWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithID'
type MockIUseCase_GetUserWithID_Call struct {
	*mock.Call
}

// GetUserWithID is a helper method to define mock.On call
//   - userID string
func (_e *MockIUseCase_Expecter) GetUserWithID(userID interface{}) *MockIUseCase_GetUserWithID_Call {
	return &MockIUseCase_GetUserWithID_Call{Call: _e.mock.On("GetUserWithID", userID)}
}

func (_c *MockIUseCase_GetUserWithID_Call) Run(run func(userID string)) *MockIUseCase_GetUserWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUseCase_GetUserWithID_Call) Return(userDTO *models.UserDTO, err error) *MockIUseCase_GetUserWithID_Call {
	_c.Call.Return(userDTO, err)
	return _c
}

func (_c *MockIUseCase_GetUserWithID_Call) RunAndReturn(run func(userID string) (*models.UserDTO, error)) *MockIUseCase_GetUserWithID_Call {
	_c.Call.Return(run)
	return _c
}

// LoginHandler provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) LoginHandler(user *models.UserDTO) (string, *time.Duration, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for LoginHandler")
	}

	var r0 string
	var r1 *time.Duration
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*models.UserDTO) (string, *time.Duration, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.UserDTO) string); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*models.UserDTO) *time.Duration); ok {
		r1 = returnFunc(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*time.Duration)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*models.UserDTO) error); ok {
		r2 = returnFunc(user)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIUseCase_LoginHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginHandler'
type MockIUseCase_LoginHandler_Call struct {
	*mock.Call
}

// LoginHandler is a helper method to define mock.On call
//   - user *models.UserDTO
func (_e *MockIUseCase_Expecter) LoginHandler(user interface{}) *MockIUseCase_LoginHandler_Call {
	return &MockIUseCase_LoginHandler_Call{Call: _e.mock.On("LoginHandler", user)}
}

func (_c *MockIUseCase_LoginHandler_Call) Run(run func(user *models.UserDTO)) *MockIUseCase_LoginHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.UserDTO
		if args[0] != nil {
			arg0 = args[0].(*models.UserDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUseCase_LoginHandler_Call) Return(s string, duration *time.Duration, err error) *MockIUseCase_LoginHandler_Call {
	_c.Call.Return(s, duration, err)
	return _c
}

func (_c *MockIUseCase_LoginHandler_Call) RunAndReturn(run func(user *models.UserDTO) (string, *time.Duration, error)) *MockIUseCase_LoginHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) Register(user *models.UserDTO) (*models.UserDTO, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.UserDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.UserDTO) (*models.UserDTO, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.UserDTO) *models.UserDTO); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.UserDTO) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIUseCase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - user *models.UserDTO
func (_e *MockIUseCase_Expecter) Register(user interface{}) *MockIUseCase_Register_Call {
	return &MockIUseCase_Register_Call{Call: _e.mock.On("Register", user)}
}

func (_c *MockIUseCase_Register_Call) Run(run func(user *models.UserDTO)) *MockIUseCase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.UserDTO
		if args[0] != nil {
			arg0 = args[0].(*models.UserDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUseCase_Register_Call) Return(userDTO *models.UserDTO, err error) *MockIUseCase_Register_Call {
	_c.Call.Return(userDTO, err)
	return _c
}

func (_c *MockIUseCase_Register_Call) RunAndReturn(run func(user *models.UserDTO) (*models.UserDTO, error)) *MockIUseCase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function for the type MockIUseCase
func (_mock *MockIUseCase) UpdateTask(taskID string, userEmail string, task *models.TaskDTO) (*models.TaskDTO, error) {
	ret := _mock.Called(taskID, userEmail, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, *models.TaskDTO) (*models.TaskDTO, error)); ok {
		return returnFunc(taskID, userEmail, task)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, *models.TaskDTO) *models.TaskDTO); ok {
		r0 = returnFunc(taskID, userEmail, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, *models.TaskDTO) error); ok {
		r1 = returnFunc(taskID, userEmail, task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUseCase_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockIUseCase_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - taskID string
//   - userEmail string
//   - task *models.TaskDTO
func (_e *MockIUseCase_Expecter) UpdateTask(taskID interface{}, userEmail interface{}, task interface{}) *MockIUseCase_UpdateTask_Call {
	return &MockIUseCase_UpdateTask_Call{Call: _e.mock.On("UpdateTask", taskID, userEmail, task)}
}

func (_c *MockIUseCase_UpdateTask_Call) Run(run func(taskID string, userEmail string, task *models.TaskDTO)) *MockIUseCase_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *models.TaskDTO
		if args[2] != nil {
			arg2 = args[2].(*models.TaskDTO)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUseCase_UpdateTask_Call) Return(taskDTO *models.TaskDTO, err error) *MockIUseCase_UpdateTask_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockIUseCase_UpdateTask_Call) RunAndReturn(run func(taskID string, userEmail string, task *models.TaskDTO) (*models.TaskDTO, error)) *MockIUseCase_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}
