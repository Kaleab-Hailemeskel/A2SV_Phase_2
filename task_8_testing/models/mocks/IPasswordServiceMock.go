// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package models_mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockIPasswordService creates a new instance of MockIPasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPasswordService {
	mock := &MockIPasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIPasswordService is an autogenerated mock type for the IPasswordService type
type MockIPasswordService struct {
	mock.Mock
}

type MockIPasswordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPasswordService) EXPECT() *MockIPasswordService_Expecter {
	return &MockIPasswordService_Expecter{mock: &_m.Mock}
}

// HashPassword provides a mock function for the type MockIPasswordService
func (_mock *MockIPasswordService) HashPassword(orginalPass string) (string, error) {
	ret := _mock.Called(orginalPass)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(orginalPass)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(orginalPass)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(orginalPass)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPasswordService_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockIPasswordService_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - orginalPass string
func (_e *MockIPasswordService_Expecter) HashPassword(orginalPass interface{}) *MockIPasswordService_HashPassword_Call {
	return &MockIPasswordService_HashPassword_Call{Call: _e.mock.On("HashPassword", orginalPass)}
}

func (_c *MockIPasswordService_HashPassword_Call) Run(run func(orginalPass string)) *MockIPasswordService_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPasswordService_HashPassword_Call) Return(s string, err error) *MockIPasswordService_HashPassword_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIPasswordService_HashPassword_Call) RunAndReturn(run func(orginalPass string) (string, error)) *MockIPasswordService_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// IsCorrectPass provides a mock function for the type MockIPasswordService
func (_mock *MockIPasswordService) IsCorrectPass(orginalPass string, hashedPass string) bool {
	ret := _mock.Called(orginalPass, hashedPass)

	if len(ret) == 0 {
		panic("no return value specified for IsCorrectPass")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(orginalPass, hashedPass)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIPasswordService_IsCorrectPass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCorrectPass'
type MockIPasswordService_IsCorrectPass_Call struct {
	*mock.Call
}

// IsCorrectPass is a helper method to define mock.On call
//   - orginalPass string
//   - hashedPass string
func (_e *MockIPasswordService_Expecter) IsCorrectPass(orginalPass interface{}, hashedPass interface{}) *MockIPasswordService_IsCorrectPass_Call {
	return &MockIPasswordService_IsCorrectPass_Call{Call: _e.mock.On("IsCorrectPass", orginalPass, hashedPass)}
}

func (_c *MockIPasswordService_IsCorrectPass_Call) Run(run func(orginalPass string, hashedPass string)) *MockIPasswordService_IsCorrectPass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPasswordService_IsCorrectPass_Call) Return(b bool) *MockIPasswordService_IsCorrectPass_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIPasswordService_IsCorrectPass_Call) RunAndReturn(run func(orginalPass string, hashedPass string) bool) *MockIPasswordService_IsCorrectPass_Call {
	_c.Call.Return(run)
	return _c
}
