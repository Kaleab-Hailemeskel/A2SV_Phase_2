// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package models_mocks

import (
	"task_8_testing/models"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// NewMockITaskDataBase creates a new instance of MockITaskDataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITaskDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITaskDataBase {
	mock := &MockITaskDataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockITaskDataBase is an autogenerated mock type for the ITaskDataBase type
type MockITaskDataBase struct {
	mock.Mock
}

type MockITaskDataBase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITaskDataBase) EXPECT() *MockITaskDataBase_Expecter {
	return &MockITaskDataBase_Expecter{mock: &_m.Mock}
}

// CheckTaskExistance provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) CheckTaskExistance(taskID primitive.ObjectID) bool {
	ret := _mock.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for CheckTaskExistance")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) bool); ok {
		r0 = returnFunc(taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockITaskDataBase_CheckTaskExistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTaskExistance'
type MockITaskDataBase_CheckTaskExistance_Call struct {
	*mock.Call
}

// CheckTaskExistance is a helper method to define mock.On call
//   - taskID primitive.ObjectID
func (_e *MockITaskDataBase_Expecter) CheckTaskExistance(taskID interface{}) *MockITaskDataBase_CheckTaskExistance_Call {
	return &MockITaskDataBase_CheckTaskExistance_Call{Call: _e.mock.On("CheckTaskExistance", taskID)}
}

func (_c *MockITaskDataBase_CheckTaskExistance_Call) Run(run func(taskID primitive.ObjectID)) *MockITaskDataBase_CheckTaskExistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockITaskDataBase_CheckTaskExistance_Call) Return(b bool) *MockITaskDataBase_CheckTaskExistance_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockITaskDataBase_CheckTaskExistance_Call) RunAndReturn(run func(taskID primitive.ObjectID) bool) *MockITaskDataBase_CheckTaskExistance_Call {
	_c.Call.Return(run)
	return _c
}

// CloseDataBase provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) CloseDataBase() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseDataBase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockITaskDataBase_CloseDataBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseDataBase'
type MockITaskDataBase_CloseDataBase_Call struct {
	*mock.Call
}

// CloseDataBase is a helper method to define mock.On call
func (_e *MockITaskDataBase_Expecter) CloseDataBase() *MockITaskDataBase_CloseDataBase_Call {
	return &MockITaskDataBase_CloseDataBase_Call{Call: _e.mock.On("CloseDataBase")}
}

func (_c *MockITaskDataBase_CloseDataBase_Call) Run(run func()) *MockITaskDataBase_CloseDataBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockITaskDataBase_CloseDataBase_Call) Return(err error) *MockITaskDataBase_CloseDataBase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockITaskDataBase_CloseDataBase_Call) RunAndReturn(run func() error) *MockITaskDataBase_CloseDataBase_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) DeleteOne(taskID primitive.ObjectID) error {
	ret := _mock.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = returnFunc(taskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockITaskDataBase_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockITaskDataBase_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - taskID primitive.ObjectID
func (_e *MockITaskDataBase_Expecter) DeleteOne(taskID interface{}) *MockITaskDataBase_DeleteOne_Call {
	return &MockITaskDataBase_DeleteOne_Call{Call: _e.mock.On("DeleteOne", taskID)}
}

func (_c *MockITaskDataBase_DeleteOne_Call) Run(run func(taskID primitive.ObjectID)) *MockITaskDataBase_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockITaskDataBase_DeleteOne_Call) Return(err error) *MockITaskDataBase_DeleteOne_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockITaskDataBase_DeleteOne_Call) RunAndReturn(run func(taskID primitive.ObjectID) error) *MockITaskDataBase_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllTasks provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) FindAllTasks(userEmail string) ([]*models.TaskDTO, error) {
	ret := _mock.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTasks")
	}

	var r0 []*models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*models.TaskDTO, error)); ok {
		return returnFunc(userEmail)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*models.TaskDTO); ok {
		r0 = returnFunc(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userEmail)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITaskDataBase_FindAllTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllTasks'
type MockITaskDataBase_FindAllTasks_Call struct {
	*mock.Call
}

// FindAllTasks is a helper method to define mock.On call
//   - userEmail string
func (_e *MockITaskDataBase_Expecter) FindAllTasks(userEmail interface{}) *MockITaskDataBase_FindAllTasks_Call {
	return &MockITaskDataBase_FindAllTasks_Call{Call: _e.mock.On("FindAllTasks", userEmail)}
}

func (_c *MockITaskDataBase_FindAllTasks_Call) Run(run func(userEmail string)) *MockITaskDataBase_FindAllTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockITaskDataBase_FindAllTasks_Call) Return(taskDTOs []*models.TaskDTO, err error) *MockITaskDataBase_FindAllTasks_Call {
	_c.Call.Return(taskDTOs, err)
	return _c
}

func (_c *MockITaskDataBase_FindAllTasks_Call) RunAndReturn(run func(userEmail string) ([]*models.TaskDTO, error)) *MockITaskDataBase_FindAllTasks_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) FindByID(taskID primitive.ObjectID) (*models.TaskDTO, error) {
	ret := _mock.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) (*models.TaskDTO, error)); ok {
		return returnFunc(taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) *models.TaskDTO); ok {
		r0 = returnFunc(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = returnFunc(taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITaskDataBase_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockITaskDataBase_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - taskID primitive.ObjectID
func (_e *MockITaskDataBase_Expecter) FindByID(taskID interface{}) *MockITaskDataBase_FindByID_Call {
	return &MockITaskDataBase_FindByID_Call{Call: _e.mock.On("FindByID", taskID)}
}

func (_c *MockITaskDataBase_FindByID_Call) Run(run func(taskID primitive.ObjectID)) *MockITaskDataBase_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockITaskDataBase_FindByID_Call) Return(taskDTO *models.TaskDTO, err error) *MockITaskDataBase_FindByID_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockITaskDataBase_FindByID_Call) RunAndReturn(run func(taskID primitive.ObjectID) (*models.TaskDTO, error)) *MockITaskDataBase_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) InsertOne(t *models.TaskDTO) (*models.TaskDTO, error) {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.TaskDTO) (*models.TaskDTO, error)); ok {
		return returnFunc(t)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.TaskDTO) *models.TaskDTO); ok {
		r0 = returnFunc(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.TaskDTO) error); ok {
		r1 = returnFunc(t)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITaskDataBase_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockITaskDataBase_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - t *models.TaskDTO
func (_e *MockITaskDataBase_Expecter) InsertOne(t interface{}) *MockITaskDataBase_InsertOne_Call {
	return &MockITaskDataBase_InsertOne_Call{Call: _e.mock.On("InsertOne", t)}
}

func (_c *MockITaskDataBase_InsertOne_Call) Run(run func(t *models.TaskDTO)) *MockITaskDataBase_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.TaskDTO
		if args[0] != nil {
			arg0 = args[0].(*models.TaskDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockITaskDataBase_InsertOne_Call) Return(taskDTO *models.TaskDTO, err error) *MockITaskDataBase_InsertOne_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockITaskDataBase_InsertOne_Call) RunAndReturn(run func(t *models.TaskDTO) (*models.TaskDTO, error)) *MockITaskDataBase_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockITaskDataBase
func (_mock *MockITaskDataBase) UpdateOne(taskID primitive.ObjectID, updatedTask *models.TaskDTO) (*models.TaskDTO, error) {
	ret := _mock.Called(taskID, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *models.TaskDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID, *models.TaskDTO) (*models.TaskDTO, error)); ok {
		return returnFunc(taskID, updatedTask)
	}
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID, *models.TaskDTO) *models.TaskDTO); ok {
		r0 = returnFunc(taskID, updatedTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TaskDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(primitive.ObjectID, *models.TaskDTO) error); ok {
		r1 = returnFunc(taskID, updatedTask)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITaskDataBase_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockITaskDataBase_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - taskID primitive.ObjectID
//   - updatedTask *models.TaskDTO
func (_e *MockITaskDataBase_Expecter) UpdateOne(taskID interface{}, updatedTask interface{}) *MockITaskDataBase_UpdateOne_Call {
	return &MockITaskDataBase_UpdateOne_Call{Call: _e.mock.On("UpdateOne", taskID, updatedTask)}
}

func (_c *MockITaskDataBase_UpdateOne_Call) Run(run func(taskID primitive.ObjectID, updatedTask *models.TaskDTO)) *MockITaskDataBase_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		var arg1 *models.TaskDTO
		if args[1] != nil {
			arg1 = args[1].(*models.TaskDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockITaskDataBase_UpdateOne_Call) Return(taskDTO *models.TaskDTO, err error) *MockITaskDataBase_UpdateOne_Call {
	_c.Call.Return(taskDTO, err)
	return _c
}

func (_c *MockITaskDataBase_UpdateOne_Call) RunAndReturn(run func(taskID primitive.ObjectID, updatedTask *models.TaskDTO) (*models.TaskDTO, error)) *MockITaskDataBase_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}
