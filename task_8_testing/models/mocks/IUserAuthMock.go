// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package models_mocks

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserAuth creates a new instance of MockIUserAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserAuth {
	mock := &MockIUserAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserAuth is an autogenerated mock type for the IUserAuth type
type MockIUserAuth struct {
	mock.Mock
}

type MockIUserAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserAuth) EXPECT() *MockIUserAuth_Expecter {
	return &MockIUserAuth_Expecter{mock: &_m.Mock}
}

// Authentication provides a mock function for the type MockIUserAuth
func (_mock *MockIUserAuth) Authentication(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIUserAuth_Authentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authentication'
type MockIUserAuth_Authentication_Call struct {
	*mock.Call
}

// Authentication is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIUserAuth_Expecter) Authentication(ctx interface{}) *MockIUserAuth_Authentication_Call {
	return &MockIUserAuth_Authentication_Call{Call: _e.mock.On("Authentication", ctx)}
}

func (_c *MockIUserAuth_Authentication_Call) Run(run func(ctx *gin.Context)) *MockIUserAuth_Authentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserAuth_Authentication_Call) Return() *MockIUserAuth_Authentication_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIUserAuth_Authentication_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIUserAuth_Authentication_Call {
	_c.Run(run)
	return _c
}
