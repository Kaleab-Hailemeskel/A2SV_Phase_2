// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package models_mocks

import (
	"task_8_testing/models"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// NewMockIUserDataBase creates a new instance of MockIUserDataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserDataBase {
	mock := &MockIUserDataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserDataBase is an autogenerated mock type for the IUserDataBase type
type MockIUserDataBase struct {
	mock.Mock
}

type MockIUserDataBase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserDataBase) EXPECT() *MockIUserDataBase_Expecter {
	return &MockIUserDataBase_Expecter{mock: &_m.Mock}
}

// CheckUserExistance provides a mock function for the type MockIUserDataBase
func (_mock *MockIUserDataBase) CheckUserExistance(userEmail string) bool {
	ret := _mock.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExistance")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(userEmail)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIUserDataBase_CheckUserExistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserExistance'
type MockIUserDataBase_CheckUserExistance_Call struct {
	*mock.Call
}

// CheckUserExistance is a helper method to define mock.On call
//   - userEmail string
func (_e *MockIUserDataBase_Expecter) CheckUserExistance(userEmail interface{}) *MockIUserDataBase_CheckUserExistance_Call {
	return &MockIUserDataBase_CheckUserExistance_Call{Call: _e.mock.On("CheckUserExistance", userEmail)}
}

func (_c *MockIUserDataBase_CheckUserExistance_Call) Run(run func(userEmail string)) *MockIUserDataBase_CheckUserExistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserDataBase_CheckUserExistance_Call) Return(b bool) *MockIUserDataBase_CheckUserExistance_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIUserDataBase_CheckUserExistance_Call) RunAndReturn(run func(userEmail string) bool) *MockIUserDataBase_CheckUserExistance_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserExistanceByID provides a mock function for the type MockIUserDataBase
func (_mock *MockIUserDataBase) CheckUserExistanceByID(userID primitive.ObjectID) bool {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExistanceByID")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) bool); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIUserDataBase_CheckUserExistanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserExistanceByID'
type MockIUserDataBase_CheckUserExistanceByID_Call struct {
	*mock.Call
}

// CheckUserExistanceByID is a helper method to define mock.On call
//   - userID primitive.ObjectID
func (_e *MockIUserDataBase_Expecter) CheckUserExistanceByID(userID interface{}) *MockIUserDataBase_CheckUserExistanceByID_Call {
	return &MockIUserDataBase_CheckUserExistanceByID_Call{Call: _e.mock.On("CheckUserExistanceByID", userID)}
}

func (_c *MockIUserDataBase_CheckUserExistanceByID_Call) Run(run func(userID primitive.ObjectID)) *MockIUserDataBase_CheckUserExistanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserDataBase_CheckUserExistanceByID_Call) Return(b bool) *MockIUserDataBase_CheckUserExistanceByID_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIUserDataBase_CheckUserExistanceByID_Call) RunAndReturn(run func(userID primitive.ObjectID) bool) *MockIUserDataBase_CheckUserExistanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// CloseDataBase provides a mock function for the type MockIUserDataBase
func (_mock *MockIUserDataBase) CloseDataBase() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseDataBase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserDataBase_CloseDataBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseDataBase'
type MockIUserDataBase_CloseDataBase_Call struct {
	*mock.Call
}

// CloseDataBase is a helper method to define mock.On call
func (_e *MockIUserDataBase_Expecter) CloseDataBase() *MockIUserDataBase_CloseDataBase_Call {
	return &MockIUserDataBase_CloseDataBase_Call{Call: _e.mock.On("CloseDataBase")}
}

func (_c *MockIUserDataBase_CloseDataBase_Call) Run(run func()) *MockIUserDataBase_CloseDataBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIUserDataBase_CloseDataBase_Call) Return(err error) *MockIUserDataBase_CloseDataBase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserDataBase_CloseDataBase_Call) RunAndReturn(run func() error) *MockIUserDataBase_CloseDataBase_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function for the type MockIUserDataBase
func (_mock *MockIUserDataBase) FindUserByEmail(userEmail string) (*models.UserDTO, error) {
	ret := _mock.Called(userEmail)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *models.UserDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.UserDTO, error)); ok {
		return returnFunc(userEmail)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.UserDTO); ok {
		r0 = returnFunc(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userEmail)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserDataBase_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockIUserDataBase_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - userEmail string
func (_e *MockIUserDataBase_Expecter) FindUserByEmail(userEmail interface{}) *MockIUserDataBase_FindUserByEmail_Call {
	return &MockIUserDataBase_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", userEmail)}
}

func (_c *MockIUserDataBase_FindUserByEmail_Call) Run(run func(userEmail string)) *MockIUserDataBase_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserDataBase_FindUserByEmail_Call) Return(userDTO *models.UserDTO, err error) *MockIUserDataBase_FindUserByEmail_Call {
	_c.Call.Return(userDTO, err)
	return _c
}

func (_c *MockIUserDataBase_FindUserByEmail_Call) RunAndReturn(run func(userEmail string) (*models.UserDTO, error)) *MockIUserDataBase_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function for the type MockIUserDataBase
func (_mock *MockIUserDataBase) FindUserByID(userID primitive.ObjectID) (*models.UserDTO, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *models.UserDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) (*models.UserDTO, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(primitive.ObjectID) *models.UserDTO); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserDataBase_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockIUserDataBase_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - userID primitive.ObjectID
func (_e *MockIUserDataBase_Expecter) FindUserByID(userID interface{}) *MockIUserDataBase_FindUserByID_Call {
	return &MockIUserDataBase_FindUserByID_Call{Call: _e.mock.On("FindUserByID", userID)}
}

func (_c *MockIUserDataBase_FindUserByID_Call) Run(run func(userID primitive.ObjectID)) *MockIUserDataBase_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 primitive.ObjectID
		if args[0] != nil {
			arg0 = args[0].(primitive.ObjectID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserDataBase_FindUserByID_Call) Return(userDTO *models.UserDTO, err error) *MockIUserDataBase_FindUserByID_Call {
	_c.Call.Return(userDTO, err)
	return _c
}

func (_c *MockIUserDataBase_FindUserByID_Call) RunAndReturn(run func(userID primitive.ObjectID) (*models.UserDTO, error)) *MockIUserDataBase_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// StoreUser provides a mock function for the type MockIUserDataBase
func (_mock *MockIUserDataBase) StoreUser(user *models.User) (*models.UserDTO, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for StoreUser")
	}

	var r0 *models.UserDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.User) (*models.UserDTO, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.User) *models.UserDTO); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserDataBase_StoreUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreUser'
type MockIUserDataBase_StoreUser_Call struct {
	*mock.Call
}

// StoreUser is a helper method to define mock.On call
//   - user *models.User
func (_e *MockIUserDataBase_Expecter) StoreUser(user interface{}) *MockIUserDataBase_StoreUser_Call {
	return &MockIUserDataBase_StoreUser_Call{Call: _e.mock.On("StoreUser", user)}
}

func (_c *MockIUserDataBase_StoreUser_Call) Run(run func(user *models.User)) *MockIUserDataBase_StoreUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.User
		if args[0] != nil {
			arg0 = args[0].(*models.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserDataBase_StoreUser_Call) Return(userDTO *models.UserDTO, err error) *MockIUserDataBase_StoreUser_Call {
	_c.Call.Return(userDTO, err)
	return _c
}

func (_c *MockIUserDataBase_StoreUser_Call) RunAndReturn(run func(user *models.User) (*models.UserDTO, error)) *MockIUserDataBase_StoreUser_Call {
	_c.Call.Return(run)
	return _c
}
