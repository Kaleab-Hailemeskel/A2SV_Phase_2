// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package models_mocks

import (
	"time"

	"github.com/dgrijalva/jwt-go"
	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// NewMockIAuthentication creates a new instance of MockIAuthentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthentication {
	mock := &MockIAuthentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAuthentication is an autogenerated mock type for the IAuthentication type
type MockIAuthentication struct {
	mock.Mock
}

type MockIAuthentication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthentication) EXPECT() *MockIAuthentication_Expecter {
	return &MockIAuthentication_Expecter{mock: &_m.Mock}
}

// GenerateSecurityToken provides a mock function for the type MockIAuthentication
func (_mock *MockIAuthentication) GenerateSecurityToken(JWTBody map[string]interface{}) (string, time.Duration) {
	ret := _mock.Called(JWTBody)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSecurityToken")
	}

	var r0 string
	var r1 time.Duration
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) (string, time.Duration)); ok {
		return returnFunc(JWTBody)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = returnFunc(JWTBody)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}) time.Duration); ok {
		r1 = returnFunc(JWTBody)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}
	return r0, r1
}

// MockIAuthentication_GenerateSecurityToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSecurityToken'
type MockIAuthentication_GenerateSecurityToken_Call struct {
	*mock.Call
}

// GenerateSecurityToken is a helper method to define mock.On call
//   - JWTBody map[string]interface{}
func (_e *MockIAuthentication_Expecter) GenerateSecurityToken(JWTBody interface{}) *MockIAuthentication_GenerateSecurityToken_Call {
	return &MockIAuthentication_GenerateSecurityToken_Call{Call: _e.mock.On("GenerateSecurityToken", JWTBody)}
}

func (_c *MockIAuthentication_GenerateSecurityToken_Call) Run(run func(JWTBody map[string]interface{})) *MockIAuthentication_GenerateSecurityToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthentication_GenerateSecurityToken_Call) Return(s string, duration time.Duration) *MockIAuthentication_GenerateSecurityToken_Call {
	_c.Call.Return(s, duration)
	return _c
}

func (_c *MockIAuthentication_GenerateSecurityToken_Call) RunAndReturn(run func(JWTBody map[string]interface{}) (string, time.Duration)) *MockIAuthentication_GenerateSecurityToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserEmailFromSecurityToken provides a mock function for the type MockIAuthentication
func (_mock *MockIAuthentication) GetUserEmailFromSecurityToken(token *jwt.Token) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEmailFromSecurityToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*jwt.Token) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthentication_GetUserEmailFromSecurityToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserEmailFromSecurityToken'
type MockIAuthentication_GetUserEmailFromSecurityToken_Call struct {
	*mock.Call
}

// GetUserEmailFromSecurityToken is a helper method to define mock.On call
//   - token *jwt.Token
func (_e *MockIAuthentication_Expecter) GetUserEmailFromSecurityToken(token interface{}) *MockIAuthentication_GetUserEmailFromSecurityToken_Call {
	return &MockIAuthentication_GetUserEmailFromSecurityToken_Call{Call: _e.mock.On("GetUserEmailFromSecurityToken", token)}
}

func (_c *MockIAuthentication_GetUserEmailFromSecurityToken_Call) Run(run func(token *jwt.Token)) *MockIAuthentication_GetUserEmailFromSecurityToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *jwt.Token
		if args[0] != nil {
			arg0 = args[0].(*jwt.Token)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthentication_GetUserEmailFromSecurityToken_Call) Return(s string, err error) *MockIAuthentication_GetUserEmailFromSecurityToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIAuthentication_GetUserEmailFromSecurityToken_Call) RunAndReturn(run func(token *jwt.Token) (string, error)) *MockIAuthentication_GetUserEmailFromSecurityToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function for the type MockIAuthentication
func (_mock *MockIAuthentication) GetUserID(token *jwt.Token) (*primitive.ObjectID, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 *primitive.ObjectID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*jwt.Token) (*primitive.ObjectID, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(*jwt.Token) *primitive.ObjectID); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthentication_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type MockIAuthentication_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - token *jwt.Token
func (_e *MockIAuthentication_Expecter) GetUserID(token interface{}) *MockIAuthentication_GetUserID_Call {
	return &MockIAuthentication_GetUserID_Call{Call: _e.mock.On("GetUserID", token)}
}

func (_c *MockIAuthentication_GetUserID_Call) Run(run func(token *jwt.Token)) *MockIAuthentication_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *jwt.Token
		if args[0] != nil {
			arg0 = args[0].(*jwt.Token)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthentication_GetUserID_Call) Return(objectID *primitive.ObjectID, err error) *MockIAuthentication_GetUserID_Call {
	_c.Call.Return(objectID, err)
	return _c
}

func (_c *MockIAuthentication_GetUserID_Call) RunAndReturn(run func(token *jwt.Token) (*primitive.ObjectID, error)) *MockIAuthentication_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function for the type MockIAuthentication
func (_mock *MockIAuthentication) ParseToken(tokenString string) (*jwt.Token, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *jwt.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*jwt.Token, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = returnFunc(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthentication_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockIAuthentication_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockIAuthentication_Expecter) ParseToken(tokenString interface{}) *MockIAuthentication_ParseToken_Call {
	return &MockIAuthentication_ParseToken_Call{Call: _e.mock.On("ParseToken", tokenString)}
}

func (_c *MockIAuthentication_ParseToken_Call) Run(run func(tokenString string)) *MockIAuthentication_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthentication_ParseToken_Call) Return(token *jwt.Token, err error) *MockIAuthentication_ParseToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockIAuthentication_ParseToken_Call) RunAndReturn(run func(tokenString string) (*jwt.Token, error)) *MockIAuthentication_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// TokenExpired provides a mock function for the type MockIAuthentication
func (_mock *MockIAuthentication) TokenExpired(token *jwt.Token) (bool, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for TokenExpired")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*jwt.Token) (bool, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(*jwt.Token) bool); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthentication_TokenExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenExpired'
type MockIAuthentication_TokenExpired_Call struct {
	*mock.Call
}

// TokenExpired is a helper method to define mock.On call
//   - token *jwt.Token
func (_e *MockIAuthentication_Expecter) TokenExpired(token interface{}) *MockIAuthentication_TokenExpired_Call {
	return &MockIAuthentication_TokenExpired_Call{Call: _e.mock.On("TokenExpired", token)}
}

func (_c *MockIAuthentication_TokenExpired_Call) Run(run func(token *jwt.Token)) *MockIAuthentication_TokenExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *jwt.Token
		if args[0] != nil {
			arg0 = args[0].(*jwt.Token)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthentication_TokenExpired_Call) Return(b bool, err error) *MockIAuthentication_TokenExpired_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockIAuthentication_TokenExpired_Call) RunAndReturn(run func(token *jwt.Token) (bool, error)) *MockIAuthentication_TokenExpired_Call {
	_c.Call.Return(run)
	return _c
}
